version: '3'
volumes:
  # Empty volume as placeholder in case that no custom mibs specified
  "monitor_custom_mibs":

services:
  zookeeper:
    image: zookeeper:3.4.10
    restart: always
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper:2888:3888
  kafka:
    networks:
      default:
        aliases:
          - ${INTERFACE_IP}
    image: wurstmeister/kafka:0.11.0.0
    restart: always
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${INTERFACE_IP:-127.0.0.1}
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 0
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  http2k:
    image: gcr.io/wizzie-registry/n2kafka:1.99-10
    restart: always
    depends_on:
      - kafka
    ports:
      - 7980:7980
    environment:
      KAFKA_BROKERS: kafka
  meraki:
    image: gcr.io/wizzie-registry/n2kafka:1.99-10
    restart: always
    depends_on:
      - kafka
    ports:
      - 2057:2057
    environment:
      KAFKA_BROKERS: kafka
      DECODER: meraki
      LISTENER_PORT: 2057
      DEFAULT_TOPIC: meraki

  kafka-connect:
    image: gcr.io/wizzie-registry/wizzie-kc:0.1.0
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://kafka-connect:8083"]
      interval: 1s
      timeout: 3s
      retries: 60
    depends_on:
      - kafka
    ports:
      - 8083:8083
      - 5577:1514/udp
      - 5576:601
    environment:
       CONNECT_BOOTSTRAP_SERVERS: kafka:9092
       CONNECT_GROUP_ID: prozzie-id
       CONNECT_CONFIG_STORAGE_TOPIC: __connect_config
       CONNECT_OFFSET_STORAGE_TOPIC: __connect_offset
       CONNECT_STATUS_STORAGE_TOPIC: __connect_status
       CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
       CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
       CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
       CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
       CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
       CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
       CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
       CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
  k2http:
    image: gcr.io/wizzie-registry/prozzie-k2http:1.4.1
    restart: always
    depends_on:
      - kafka
    environment:
      HTTP_POST_PARAMS: "apikey:${CLIENT_API_KEY}"
      KAFKA_OFFSET_RESET: "earliest"
      KAFKA_CONSUMER_GROUP: "k2http"
      KAFKA_BROKERS: "kafka:9092"
      HTTP_ENDPOINT: "${ZZ_HTTP_ENDPOINT:-http://localhost:8000/v1/data}"
      PIPELINE_QUEUE: 1000
      PIPELINE_BACKOFF: 10
      PIPELINE_RETRIES: 3
      LIMITER_MAX_MESSAGES: 5000
      LIMITER_MAX_BYTES: 0
      BATCH_WORKERS: 1
      BATCH_SIZE: 1000
      BATCH_TIMEOUT_MS: 100
      BATCH_DEFLATE: "false"
      HTTP_WORKERS: 1
      HTTP_INSECURE: "false"
      KAFKA_TOPICS: "*"
      KAFKA_VERSION: "0_10_2_0"
  f2k:
    image: gcr.io/wizzie-registry/prozzie-f2k:1.1.0
    restart: always
    depends_on:
      - kafka
    ports:
      - "${NETFLOW_COLLECTOR_PORT:-2055}:${NETFLOW_COLLECTOR_PORT:-2055}/udp"
    environment:
      F2K_NTHREADS: 3
      KAFKA_TOPIC: "${NETFLOW_KAFKA_TOPIC:-flow}"
      COLLECTOR_PORT: "${NETFLOW_COLLECTOR_PORT:-2055}"
      NETFLOW_PROBES: "${NETFLOW_PROBES}"
      RDKAFKA_QUEUE_BUFFERING_MAX_MS: 1000
  sfacctd:
    image: gcr.io/wizzie-registry/prozzie-sfacctd:1.6.2
    restart: always
    depends_on:
      - kafka
    ports:
      - "${SFLOW_COLLECTOR_PORT:-6343}:${SFLOW_COLLECTOR_PORT:-6343}/udp"
    environment:
      KAFKA_BROKERS: "kafka"
      KAFKA_TOPIC: "${SFLOW_KAFKA_TOPIC:-pmacct}"
      COLLECTOR_PORT: "${SFLOW_COLLECTOR_PORT:-6343}"
      SFACCTD_RENORMALIZE: "${SFLOW_RENORMALIZE:-true}"
      AGGREGATE: "${SFLOW_AGGREGATE:-src_host}"
  monitor:
    image: gcr.io/wizzie-registry/prozzie-monitor:1.2.0
    restart: always
    depends_on:
      - kafka
    ports:
      - "${MONITOR_TRAPS_PORT:-162}:${MONITOR_TRAPS_PORT:-162}/udp"
    environment:
      REQUESTS_TIMEOUT: ${MONITOR_REQUEST_TIMEOUT:-25}
      KAFKA_BROKERS: 'kafka'
      KAFKA_TOPIC: "${MONITOR_KAFKA_TOPIC:-monitor}"
      SENSORS_ARRAY: "${MONITOR_SENSORS_ARRAY:-''}"
      TRAPS_PORT: "${MONITOR_TRAPS_PORT:-''}"

    volumes:
      - "${MONITOR_CUSTOM_MIB_PATH:-monitor_custom_mibs}:/root/.snmp/mibs:ro"
